{"version":3,"sources":["components/Result/Result.module.scss","components/Form/Form.module.scss","components/Modal/Modal.module.scss","components/Header/Header.module.scss","components/ErrorResult/ErrorResult.module.scss","App.module.scss","components/Header/Header.js","components/Form/Form.js","components/Result/Result.js","components/ErrorResult/ErrorResult.js","components/Modal/Modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","styles","wrapper","Form","submit","change","form","onSubmit","type","name","input","placeholder","onChange","autoComplete","button","Result","props","weather","city","temp","sunrise","sunset","pressure","wind","humidity","clouds","date","description","tempMin","tempMax","sunriseTime","Date","toLocaleTimeString","sunsetTime","day","getDay","content","intro","mainInfo","tempMinMax","secondaryInfo","first","second","ErrorResult","code","errorInfo","Modal","err","closeModalFn","closeButton","onClick","APIKey","App","state","isModalOpetn","icon","handleChange","e","setState","target","value","toUpperCase","handleCloseModal","isModalOpen","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","time","toLocaleString","console","log","prevState","sys","main","temp_min","temp_max","speed","all","catch","reset","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,QAAU,wBAAwB,MAAQ,sBAAsB,SAAW,yBAAyB,YAAc,4BAA4B,KAAO,qBAAqB,KAAO,qBAAqB,WAAa,2BAA2B,cAAgB,8BAA8B,MAAQ,sBAAsB,OAAS,yB,gBCArVD,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,OAAS,uB,gBCAjFD,EAAOC,QAAU,CAAC,QAAU,uBAAuB,YAAc,2BAA2B,YAAc,6B,sBCA1GD,EAAOC,QAAU,CAAC,QAAU,0B,gBCA5BD,EAAOC,QAAU,CAAC,UAAY,iC,gBCA9BD,EAAOC,QAAU,CAAC,QAAU,uB,sMCiBbC,EAfA,WACb,OACE,oCACE,yBAAKC,UAAWC,IAAOC,SACrB,2CACA,mL,gBCwBOC,EA5BF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACtB,OACE,oCACE,0BAAML,UAAWC,IAAOK,KAAMC,SAAUH,GACtC,2BACEI,KAAK,OACLC,KAAK,OACLT,UAAWC,IAAOS,MAClBC,YAAY,qBACZC,SAAUP,EACVQ,aAAa,QAEf,6BACA,2BACEL,KAAK,OACLC,KAAK,OACLT,UAAWC,IAAOS,MAClBE,SAAUP,EACVM,YAAY,wBACZE,aAAa,QAGf,4BAAQb,UAAWC,IAAOa,QAA1B,kB,gCCwCOC,EA/DA,SAAAC,GAAU,IAAD,EAclBA,EAAMC,QAZRC,EAFoB,EAEpBA,KACAC,EAHoB,EAGpBA,KACAC,EAJoB,EAIpBA,QACAC,EALoB,EAKpBA,OACAC,EANoB,EAMpBA,SACAC,EAPoB,EAOpBA,KACAC,EARoB,EAQpBA,SACAC,EAToB,EASpBA,OACAC,EAVoB,EAUpBA,KACAC,EAXoB,EAWpBA,YACAC,EAZoB,EAYpBA,QACAC,EAboB,EAapBA,QAGIC,EAAc,IAAIC,KAAe,IAAVX,GAAgBY,qBACvCC,EAAa,IAAIF,KAAc,IAATV,GAAeW,qBAGrCE,GADQ,IAAIH,MACAI,SAUlB,OACE,oCACE,yBAAKnC,UAAWC,IAAOmC,SACrB,uBAAGpC,UAAWC,IAAOoC,OAArB,wBACwBnB,EADxB,cAZU,CACd,SACA,SACA,UACA,aACA,WACA,SACA,YAMqDgB,GADjD,IACwDR,GAExD,yBAAK1B,UAAWC,IAAOqC,UACrB,uBAAGtC,UAAWC,IAAO0B,aAAcA,GAEnC,uBAAG3B,UAAWC,IAAOkB,MAArB,IAA6BA,EAA7B,UACA,uBAAGnB,UAAWC,IAAOsC,YAClBX,EADH,SACoBC,EADpB,UAMF,yBAAK7B,UAAWC,IAAOuC,eACrB,yBAAKxC,UAAWC,IAAOwC,OACrB,0CAAgBhB,EAAhB,MACA,wCAAcH,EAAd,SACA,uCAAaQ,IAEf,yBAAK9B,UAAWC,IAAOyC,QACrB,oCAAUnB,EAAV,QACA,wCAAcC,EAAd,OACA,sCAAYS,Q,iBC7CTU,EAVK,SAAC,GAAoB,IAAlBzB,EAAiB,EAAjBA,KAAM0B,EAAW,EAAXA,KAC3B,OACE,oCACE,uBAAG5C,UAAWC,IAAO4C,WAArB,eACe3B,EADf,OACyB0B,KCahBE,EAfD,SAAC,GAAgD,IAA9C7B,EAA6C,EAA7CA,QAAS8B,EAAoC,EAApCA,IAAKC,EAA+B,EAA/BA,aAAc9B,EAAiB,EAAjBA,KAAM0B,EAAW,EAAXA,KACjD,OACE,oCACE,yBAAK5C,UAAWC,IAAOC,SACrB,4BAAQF,UAAWC,IAAOgD,YAAaC,QAASF,IAC/CD,EACC,kBAAC,EAAD,CAAa7B,KAAMA,EAAM0B,KAAMA,IAE/B,kBAAC,EAAD,CAAQ3B,QAASA,O,iBCPrBkC,EAAS,mCAsGAC,E,2MAnGbC,MAAQ,CACNC,cAAc,EACdC,KAAM,GACNrC,KAAM,GACN0B,KAAM,GACNlB,KAAM,GACNN,QAAS,GACTC,OAAQ,GACRF,KAAM,GACNQ,YAAa,GACbL,SAAU,GACVC,KAAM,GACNC,SAAU,GACVC,OAAQ,GACRG,QAAS,GACTC,QAAS,GACTkB,KAAK,G,EAGPS,aAAe,SAAAC,GACb,EAAKC,SAAL,eACGD,EAAEE,OAAOlD,KAAOgD,EAAEE,OAAOC,MAAMC,iB,EAIpCC,iBAAmB,SAAAL,GACjB,EAAKC,SAAS,CACZK,aAAa,K,EAIjBC,iBAAmB,SAAAP,GACjBA,EAAEQ,iBACF,IAAMC,EAAG,4DAAwD,EAAKb,MAAMnC,KAAnE,YAA2E,EAAKmC,MAAMT,KAAtF,+BAAiHO,GAE1HgB,MAAMD,GACHE,MAAK,SAAAC,GACJ,GAAIA,EAASC,GACX,OAAOD,EAET,MAAME,MAAM,+BAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GACJ,IAAMC,GAAO,IAAI3C,MAAO4C,iBACxBC,QAAQC,IAAIH,GACZE,QAAQC,IAAIJ,GAEZ,EAAKf,UAAS,SAAAoB,GAAS,MAAK,CAC1B/B,KAAK,EACLQ,KAAMkB,EAAKxD,QAAQ,GAAGsC,KACtB7B,KAAMgD,EACN/C,YAAa8C,EAAKxD,QAAQ,GAAGU,YAC7BP,QAASqD,EAAKM,IAAI3D,QAClBC,OAAQoD,EAAKM,IAAI1D,OACjBF,KAAMsD,EAAKO,KAAK7D,KAChBG,SAAUmD,EAAKO,KAAK1D,SACpBM,QAAS6C,EAAKO,KAAKC,SACnBpD,QAAS4C,EAAKO,KAAKE,SACnB3D,KAAMkD,EAAKlD,KAAK4D,MAChB3D,SAAUiD,EAAKO,KAAKxD,SACpBC,OAAQgD,EAAKhD,OAAO2D,IACpBlE,KAAM4D,EAAU5D,KAChB0B,KAAMkC,EAAUlC,KAChBmB,aAAa,SAGhBsB,OAAM,SAAAtC,GACL,EAAKW,UAAS,SAAAoB,GAAS,MAAK,CAC1B/B,KAAK,EACL7B,KAAM4D,EAAU5D,KAChB0B,KAAMkC,EAAUlC,KAChBmB,aAAa,SAGnBN,EAAEE,OAAO2B,S,wEAED,IAAD,EACqBC,KAAKlC,MAAzBN,EADD,EACCA,IAAK7B,EADN,EACMA,KAAM0B,EADZ,EACYA,KACnB,OACE,oCACE,yBAAK5C,UAAWC,IAAOC,SACrB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMG,OAAQkF,KAAK/B,aAAcpD,OAAQmF,KAAKvB,mBAC7CuB,KAAKlC,MAAMU,YACV,kBAAC,EAAD,CACEf,aAAcuC,KAAKzB,iBACnB7C,QAASsE,KAAKlC,MACdN,IAAKA,EACL7B,KAAMA,EACN0B,KAAMA,IAEN,W,GA7FI4C,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.66c6a59a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Result_content__3mDrq\",\"intro\":\"Result_intro__22697\",\"mainInfo\":\"Result_mainInfo__3vswj\",\"description\":\"Result_description__2DSpo\",\"icon\":\"Result_icon__1hxbS\",\"temp\":\"Result_temp__2kkEV\",\"tempMinMax\":\"Result_tempMinMax__2484y\",\"secondaryInfo\":\"Result_secondaryInfo__3GAgd\",\"first\":\"Result_first__1wc5H\",\"second\":\"Result_second__3HA2J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__2cXka\",\"input\":\"Form_input__2NVZt\",\"button\":\"Form_button__1jmlY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Modal_wrapper__iguiL\",\"modalAppear\":\"Modal_modalAppear__eoT_7\",\"closeButton\":\"Modal_closeButton__cAs8-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__3vVHP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorInfo\":\"ErrorResult_errorInfo__1xAp5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__1Fq0H\"};","import React from \"react\";\r\nimport styles from \"./Header.module.scss\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <div className={styles.wrapper}>\r\n        <h1>Weather App</h1>\r\n        <h3>\r\n          This simple app let you check meteo condition in any city. Just enter\r\n          the city name and country code. All data are provided by Open Weather\r\n          Map.\r\n        </h3>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport styles from \"./Form.module.scss\";\r\n\r\n\r\nconst Form = ({ submit, change }) => {\r\n  return (\r\n    <>\r\n      <form className={styles.form} onSubmit={submit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"city\"\r\n          className={styles.input}\r\n          placeholder=\"Enter city name...\"\r\n          onChange={change}\r\n          autoComplete=\"off\"\r\n        />\r\n        <br />\r\n        <input\r\n          type=\"text\"\r\n          name=\"code\"\r\n          className={styles.input}\r\n          onChange={change}\r\n          placeholder=\"Enter country code...\"\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <button className={styles.button}>Get weather</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport styles from \"./Result.module.scss\";\r\n\r\nconst Result = props => {\r\n  const {\r\n    city,\r\n    temp,\r\n    sunrise,\r\n    sunset,\r\n    pressure,\r\n    wind,\r\n    humidity,\r\n    clouds,\r\n    date,\r\n    description,\r\n    tempMin,\r\n    tempMax\r\n  } = props.weather;\r\n\r\n  const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n  const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n\r\n  const today = new Date();\r\n  const day = today.getDay();\r\n  const daylist = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday \",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\"\r\n  ];\r\n  return (\r\n    <>\r\n      <div className={styles.content}>\r\n        <p className={styles.intro}>\r\n          Weather condition in {city} today, on {daylist[day]} {date}\r\n        </p>\r\n        <div className={styles.mainInfo}>\r\n          <p className={styles.description}>{description}</p>\r\n\r\n          <p className={styles.temp}> {temp}&#176;c </p>\r\n          <p className={styles.tempMinMax}>\r\n            {tempMin} &#176;/{tempMax} &#176;\r\n          </p>\r\n\r\n        </div>\r\n\r\n        <div className={styles.secondaryInfo}>\r\n          <div className={styles.first}>\r\n            <p>Cloudiness: {clouds} %</p>\r\n            <p>Pressure: {pressure} hPa </p>\r\n            <p>Sunrise: {sunriseTime}</p>\r\n          </div>\r\n          <div className={styles.second}>\r\n            <p>Wind: {wind} m/s</p>\r\n            <p>Humidity: {humidity} % </p>\r\n            <p>Sunset: {sunsetTime}</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React from \"react\";\r\nimport styles from \"./ErrorResult.module.scss\";\r\n\r\nconst ErrorResult = ({ city, code }) => {\r\n  return (\r\n    <>\r\n      <p className={styles.errorInfo}>\r\n        There is no {city} in {code}\r\n      </p>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ErrorResult;\r\n","import React from \"react\";\r\nimport styles from \"./Modal.module.scss\";\r\nimport Result from \"../Result/Result\";\r\nimport ErrorResult from \"../ErrorResult/ErrorResult\";\r\n\r\nconst Modal = ({ weather, err, closeModalFn, city, code }) => {\r\n  return (\r\n    <>\r\n      <div className={styles.wrapper}>\r\n        <button className={styles.closeButton} onClick={closeModalFn}></button>\r\n        {err ? (\r\n          <ErrorResult city={city} code={code} />\r\n        ) : (\r\n          <Result weather={weather} />\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { Component } from \"react\";\nimport Header from \"../src/components/Header/Header\";\nimport Form from \"../src/components/Form/Form\";\nimport Modal from \"../src/components/Modal/Modal\";\nimport styles from \"./App.module.scss\";\n\nconst APIKey = \"eab6b315ed8fbf920adad64416450b78\";\n\nclass App extends Component {\n  state = {\n    isModalOpetn: false,\n    icon: \"\",\n    city: \"\",\n    code: \"\",\n    date: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    description: \"\",\n    pressure: \"\",\n    wind: \"\",\n    humidity: \"\",\n    clouds: \"\",\n    tempMin: \"\",\n    tempMax: \"\",\n    err: false\n  };\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value.toUpperCase()\n    });\n  };\n\n  handleCloseModal = e => {\n    this.setState({\n      isModalOpen: false\n    });\n  };\n\n  handleCitySubmit = e => {\n    e.preventDefault();\n    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.city},${this.state.code}&units=metric&appid=${APIKey}`;\n\n    fetch(API)\n      .then(response => {\n        if (response.ok) {\n          return response;\n        }\n        throw Error(\"nie udało się!\");\n      })\n      .then(response => response.json())\n      .then(data => {\n        const time = new Date().toLocaleString();\n        console.log(time);\n        console.log(data);\n\n        this.setState(prevState => ({\n          err: false,\n          icon: data.weather[0].icon,\n          date: time,\n          description: data.weather[0].description,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          tempMin: data.main.temp_min,\n          tempMax: data.main.temp_max,\n          wind: data.wind.speed,\n          humidity: data.main.humidity,\n          clouds: data.clouds.all,\n          city: prevState.city,\n          code: prevState.code,\n          isModalOpen: true\n        }));\n      })\n      .catch(err => {\n        this.setState(prevState => ({\n          err: true,\n          city: prevState.city,\n          code: prevState.code,\n          isModalOpen: true\n        }));\n      });\n    e.target.reset();\n  };\n  render() {\n    const { err, city, code } = this.state;\n    return (\n      <>\n        <div className={styles.wrapper}>\n          <Header />\n          <Form change={this.handleChange} submit={this.handleCitySubmit} />\n          {this.state.isModalOpen ? (\n            <Modal\n              closeModalFn={this.handleCloseModal}\n              weather={this.state}\n              err={err}\n              city={city}\n              code={code}\n            />\n          ) : null}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}